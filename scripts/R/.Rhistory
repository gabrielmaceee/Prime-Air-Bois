count <- data %>%
group_by(insee_com) %>%
count()
# Get polygons communes data
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom
FROM bd_admin_express.geo_commune_2022
WHERE insee_dep = '38'
ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
data_fo <- data[data$Type.Ancien.appareil == "Foyer ouvert" & !(is.na(data$Type.Ancien.appareil)),] %>% group_by(insee_com) %>% count()
data_nfo <- data[data$Type.Ancien.appareil != "Foyer ouvert" & !(is.na(data$Type.Ancien.appareil)),] %>% group_by(insee_com) %>% count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("insee_com" == "insee_com") ) # n.x
layer_communes <- layer_communes %>% left_join(data_fo, by = join_by("insee_com" == "insee_com") ) # n.y
layer_communes[is.na(layer_communes$n.y),"n.y"] <- 0
layer_communes <- layer_communes %>% left_join(data_nfo, by = join_by("insee_com" == "insee_com") ) # n
layer_communes[is.na(layer_communes$n),"n"] <- 0
summary((layer_communes$n.x) == (layer_communes$n.y + layer_communes$n ))
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>%
mutate(taux_foyers_ouverts = (n.y/(n.x)),
foyers_ouverts = n.y,
autres_foyers = n,
nombre_prime = n.x)
plot <-to_plot %>%
ggplot() +
geom_sf(aes(fill = taux_majorées)) +
scale_fill_gradient(low = "white",
high = "blue",
na.value = "grey80")+
#scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = taux_foyers_ouverts, label3 = foyers_ouverts, label4 = autres_foyers), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux de primes majorées") +
theme_void()
# Save map to png
plot
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>%
mutate(taux_foyers_ouverts = (n.y/(n.x)),
foyers_ouverts = n.y,
autres_foyers = n,
nombre_prime = n.x)
plot <-to_plot %>%
ggplot() +
geom_sf(aes(fill = taux_foyers_ouverts)) +
scale_fill_gradient(low = "white",
high = "blue",
na.value = "grey80")+
#scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = taux_foyers_ouverts, label3 = foyers_ouverts, label4 = autres_foyers), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux de primes majorées") +
theme_void()
# Save map to png
plot
#ggsave("../carto/carte_taux_majorées.png", width = 20, height = 20, units = "cm")
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>%
mutate(taux_foyers_ouverts = (n.y/(n.x)),
foyers_ouverts = n.y,
autres_foyers = n,
nombre_prime = n.x)
plot <-to_plot %>%
ggplot() +
geom_sf(aes(fill = taux_foyers_ouverts)) +
scale_fill_gradient(low = "white",
high = "blue",
na.value = "grey80")+
#scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = taux_foyers_ouverts, label3 = foyers_ouverts, label4 = autres_foyers), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux de foyers ouverts") +
theme_void()
# Save map to png
plot
ggsave("../carto/carte_taux_foyers_ouverts.png", width = 20, height = 20, units = "cm")
# Convertir l'objet ggplot en plotly
library(plotly)
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_foyers_ouverts.html")
# Convertir l'objet ggplot en plotly
library(plotly)
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_foyers_ouverts_interactive.html")
names(appareils)[2] <- c("adresse_ville")
appareils <- appareils %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "_", "-")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, " ", "-")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "’", "'")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "É", "E")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "È", "E")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "Ê", "E")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "Ô", "O")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "Â", "A")) %>%
mutate(adresse_ville = toupper(adresse_ville)) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "SAINT", "ST")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "ALLEVARD-LES-BAINS", "CRETS-EN-BELLEDONNE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-PLATEAU-DES-PETITES-ROCHES", "PLATEAU-DES-PETITES-ROCHES")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD", "VILLARD-BONNOT")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-FONTANIL-CORNILLON", "FONTANIL-CORNILLON")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-GA", "LE-GUA")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VF", "VIF")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "MURAINETTE", "MURIANETTE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SAPPEY-EN-CHARTREUSE", "LE-SAPPEY-EN-CHARTREUSE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOIROIZE", "VEUREY-VOROIZE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOROISE", "VEUREY-VOROIZE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SEYSINNET-PARISET", "SEYSSINET-PARISET")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LANCEY", "LA-COMBE-DE-LANCEY"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "STE-AGNÈS", "STE-AGNES"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-BUISSIÈRE", "LA-BUISSIERE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FLACHÈRE", "LA-FLACHERE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "HURTIÈRES", "HURTIERES"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "CRÊTS-EN-BELLEDONNE", "CRETS-EN-BELLEDONNE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-CHAMP-PRÈS-FROGES", "LE-CHAMP-PRES-FROGES"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "DOMÈNE", "DOMENE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FERRIÈRE", "LA-FERRIERE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD-->VILLARD-BONNOT", "VILLARD-BONNOT"))
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom
FROM bd_admin_express.geo_commune_2022
WHERE insee_dep = '38'
ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
dim(layer_communes)
data$dossier_reçu <- as.Date(data$dossier_reçu)
count_2021 <- data[data$dossier_reçu >= "2021-01-01",] %>%
group_by(adresse_ville) %>%
count()
count_av_2021 <- data[data$dossier_reçu < "2021-01-01",] %>%
group_by(adresse_ville) %>%
count()
count <- data %>%
group_by(adresse_ville) %>%
count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("nom_commune" == "adresse_ville") ) # n.x
layer_communes <- layer_communes %>% left_join(count_2021, by = join_by("nom_commune" == "adresse_ville") ) # n.y
layer_communes <- layer_communes %>% left_join(count_av_2021, by = join_by("nom_commune" == "adresse_ville") ) # n
############################################################################
#NE PRENDRE QUE APRès 2021
##########################################
View(layer_communes)
# depuis 2021 :
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
library(readxl)
library(writexl)
library(stringr)
library(tidyr)
library(sf)
library(dplyr)
library(stats)
library(ggplot2)
library(plotly)
wd_script <- "C:/Users/gmace/PAB/Projet Bois-buche/scripts/R"
setwd(wd_script)
con_encoding <- "UTF-8"
source("R_connect_siddt.R")
source("R_functions.R")
setwd("C:/Users/gmace/PAB/Projet Bois-buche/script R Gabriel")
data <- read_excel("../data/3_Resultat/data_questionnaire_complet.xlsx")[-1]
comm <- read.csv("../data/siddt.csv", sep = ";", skip = 2)[-c(127:130)]
comm2 <- read.csv("../data/siddt2.csv", sep = ";", skip = 2)[-c(84,85,86, 87)]
appareils <- read_excel("../data/appareils_communes.xlsx")
names(appareils)[2] <- c("adresse_ville")
appareils <- appareils %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "_", "-")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, " ", "-")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "’", "'")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "É", "E")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "È", "E")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "Ê", "E")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "Ô", "O")) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "Â", "A")) %>%
mutate(adresse_ville = toupper(adresse_ville)) %>%
mutate(adresse_ville = str_replace_all(adresse_ville, "SAINT", "ST")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "ALLEVARD-LES-BAINS", "CRETS-EN-BELLEDONNE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-PLATEAU-DES-PETITES-ROCHES", "PLATEAU-DES-PETITES-ROCHES")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD", "VILLARD-BONNOT")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-FONTANIL-CORNILLON", "FONTANIL-CORNILLON")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-GA", "LE-GUA")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VF", "VIF")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "MURAINETTE", "MURIANETTE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SAPPEY-EN-CHARTREUSE", "LE-SAPPEY-EN-CHARTREUSE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOIROIZE", "VEUREY-VOROIZE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOROISE", "VEUREY-VOROIZE")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SEYSINNET-PARISET", "SEYSSINET-PARISET")) %>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LANCEY", "LA-COMBE-DE-LANCEY"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "STE-AGNÈS", "STE-AGNES"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-BUISSIÈRE", "LA-BUISSIERE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FLACHÈRE", "LA-FLACHERE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "HURTIÈRES", "HURTIERES"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "CRÊTS-EN-BELLEDONNE", "CRETS-EN-BELLEDONNE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-CHAMP-PRÈS-FROGES", "LE-CHAMP-PRES-FROGES"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "DOMÈNE", "DOMENE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FERRIÈRE", "LA-FERRIERE"))%>%
mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD-->VILLARD-BONNOT", "VILLARD-BONNOT"))
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom
FROM bd_admin_express.geo_commune_2022
WHERE insee_dep = '38'
ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
dim(layer_communes)
data$dossier_reçu <- as.Date(data$dossier_reçu)
count_2021 <- data[data$dossier_reçu >= "2021-01-01",] %>%
group_by(adresse_ville) %>%
count()
count_av_2021 <- data[data$dossier_reçu < "2021-01-01",] %>%
group_by(adresse_ville) %>%
count()
count <- data %>%
group_by(adresse_ville) %>%
count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("nom_commune" == "adresse_ville") ) # n.x
layer_communes <- layer_communes %>% left_join(count_2021, by = join_by("nom_commune" == "adresse_ville") ) # n.y
layer_communes <- layer_communes %>% left_join(count_av_2021, by = join_by("nom_commune" == "adresse_ville") ) # n
############################################################################
#NE PRENDRE QUE APRès 2021
##########################################
appareils_2005 = appareils[appareils$anciennete == "Antérieur à 2005" & appareils$nb_appareil >=0,]
appareils_2005$nb_appareil = round(appareils_2005$nb_appareil)
ville = unique(data[data$adresse_ville %in% unique(appareils_2005$adresse_ville),]$adresse_ville)
appareils_2005 <- appareils_2005 %>% group_by(adresse_ville)
appareils_2005 <- appareils_2005 %>% summarise(nb_appareil = sum(nb_appareil))
# depuis 2021 :
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_changes_depuis_2021 = n.y / (nb_appareil),
appareils_changes_depuis_2021 = n.y)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_changes_depuis_2021)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_changes_depuis_2021, label4 = appareils_changes_depuis_2021), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux d'appareils cibles changés depuis 2021") +
theme_void()
plot
ggsave("../carto/carte_objectifs.png", width = 20, height = 20, units = "cm")
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_cibles_changes = n.x / (nb_appareil + n),
appareils_changes = n.x)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_cibles_changes)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_cibles_changes, label4 = appareils_changes), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux d'appareils cibles changés") +
theme_void()
plot
ggsave("../carto/carte_objectifs.png", width = 20, height = 20, units = "cm")
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_2021_interactive.html")
# depuis 2021 :
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_changes_depuis_2021 = n.y / (nb_appareil),
appareils_changes_depuis_2021 = n.y)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_changes_depuis_2021)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_changes_depuis_2021, label4 = appareils_changes_depuis_2021), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux d'appareils cibles changés depuis 2021") +
theme_void()
plot
ggsave("../carto/carte_objectifs_2021.png", width = 20, height = 20, units = "cm")
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_2021_interactive.html")
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_2021_interactive.html")
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_cibles_changes = n.x / (nb_appareil + n),
appareils_changes = n.x)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_cibles_changes)) +
scale_fill_gradient(0 = "white", 1 = "blue", na.value = "grey80") +
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_cibles_changes = n.x / (nb_appareil + n),
appareils_changes = n.x)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_cibles_changes)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80", limits = c(0, 1))) +
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_cibles_changes = n.x / (nb_appareil + n),
appareils_changes = n.x)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_cibles_changes)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80", limits = c(0, 1)) +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_cibles_changes, label4 = appareils_changes), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux d'appareils cibles changés") +
theme_void()
plot
ggsave("../carto/carte_objectifs.png", width = 20, height = 20, units = "cm")
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_interactive.html")
# depuis 2021 :
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
mutate(appareils_anterieurs_2005 = nb_appareil,
taux_appareils_changes_depuis_2021 = n.y / (nb_appareil),
appareils_changes_depuis_2021 = n.y)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = taux_appareils_changes_depuis_2021)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80", limits = c(0, 1)) +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_changes_depuis_2021, label4 = appareils_changes_depuis_2021), size = 1, color = "transparent", na.rm = FALSE) +
labs(fill = "Taux d'appareils cibles changés depuis 2021") +
theme_void()
plot
ggsave("../carto/carte_objectifs_2021.png", width = 20, height = 20, units = "cm")
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_2021_interactive.html")
library(readxl)
library(writexl)
library(stringr)
library(tidyr)
library(sf)
library(dplyr)
library(stats)
library(ggplot2)
library(plotly)
wd_script <- "C:/Users/gmace/PAB/Projet Bois-buche/scripts/R"
setwd(wd_script)
con_encoding <- "UTF-8"
source("R_connect_siddt.R")
source("R_functions.R")
setwd("C:/Users/gmace/PAB/Projet Bois-buche/script R Gabriel")
data <- read_excel("../data/3_Resultat/data_questionnaire_complet.xlsx")[-1]
comm <- read.csv("../data/siddt.csv", sep = ";", skip = 2)[-c(127:130)]
comm2 <- read.csv("../data/siddt2.csv", sep = ";", skip = 2)[-c(84,85,86, 87)]
appareils <- read_excel("../data/appareils_communes.xlsx")
View(comm)
data_comm <- left_join(data, comm, by= c("insee_com" = "communes.depcom"))
data_comm2 <- left_join(data, comm2, by= c("insee_com" = "communes.depcom"))
View(data_comm)
table(data_comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....)
forets = comm[comm$communes.depcom %in% unique(data$insee_com),]
forets = forets[order(forets$communes.depcom ),]
siddt2 = comm2[comm2$communes.depcom %in% unique(data$insee_com),]
siddt2 = siddt2[order(siddt2$communes.depcom ),]
nb_doss_ville = table(data_comm[data_comm$insee_com %in% unique(comm$communes.depcom),]$insee_com)
nb_doss_ville2 = table(data_comm2[data_comm2$insee_com %in% unique(comm2$communes.depcom),]$insee_com)
for(n in names(forets)[-c(1,2)]){
print(n)
print(cor(as.numeric(forets[,n]), nb_doss_ville))
}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom
FROM bd_admin_express.geo_commune_2022
WHERE insee_dep = '38'
ORDER BY 1"
layer_communes <- st_read(con, query = sql)
count <- data %>%
group_by(insee_com) %>%
count()
forets = forets[,c(1,3, 4)]
names(forets) <- c("insee_com", "superficie_forets", "part_forets")
forets[,2] <-as.numeric(forets[,2])
forets[,3] <-as.numeric(forets[,3])
layer_communes <- layer_communes %>% left_join(count)
library(plotly)
to_plot <- left_join(layer_communes, forets, by = "insee_com")
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = part_forets)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = superficie_forets, label3 = part_forets, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
theme_void()
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
View(forets)
forets = comm[comm$communes.depcom %in% unique(data$insee_com),]
forets = forets[order(forets$communes.depcom ),]
siddt2 = comm2[comm2$communes.depcom %in% unique(data$insee_com),]
siddt2 = siddt2[order(siddt2$communes.depcom ),]
nb_doss_ville = table(data_comm[data_comm$insee_com %in% unique(comm$communes.depcom),]$insee_com)
nb_doss_ville2 = table(data_comm2[data_comm2$insee_com %in% unique(comm2$communes.depcom),]$insee_com)
View(forets)
View(data_comm2)
View(comm2)
View(siddt2)
names(siddt2)
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom
FROM bd_admin_express.geo_commune_2022
WHERE insee_dep = '38'
ORDER BY 1"
layer_communes <- st_read(con, query = sql)
count <- data %>%
group_by(insee_com) %>%
count()
names(siddt2)[1:3] = c("insee_com", "communes", "densité_poplation_km2_2020")
siddt2[,3] <-as.numeric(siddt2[,3])
layer_communes <- layer_communes %>% left_join(count)
library(plotly)
to_plot <- left_join(layer_communes, siddt2[,c(1:3)], by = "insee_com")
# Créer un objet ggplot
plot <- ggplot(to_plot) +
geom_sf(aes(fill = densité_poplation_km2_2020)) +
scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = densité_poplation_km2_2020, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
theme_void()
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
View(siddt2)
View(data_comm2)
View(data_comm2)
library(readxl)
library(writexl)
library(stringr)
library(tidyr)
library(sf)
library(dplyr)
library(stats)
library(ggplot2)
library(plotly)
wd_script <- "C:/Users/gmace/PAB/Projet Bois-buche/scripts/R"
setwd(wd_script)
con_encoding <- "UTF-8"
source("R_connect_siddt.R")
source("R_functions.R")
library(readxl)
library(writexl)
library(stringr)
library(tidyr)
library(sf)
library(dplyr)
library(stats)
library(ggplot2)
library(plotly)
wd_script <- "C:/Users/gmace/PAB/Projet Bois-buche/scripts/R"
setwd(wd_script)
con_encoding <- "UTF-8"
source("R_connect_siddt.R")
source("R_functions.R")
library(readxl)
library(writexl)
library(dplyr)
library(stringr)
library(sf)
library(ggplot2)
library(purrr)
library(forcats)
library(glue)
library(janitor)
library(wordcloud)
library(tm)
library(tidyr)
library(fastDummies)
library(RColorBrewer)
# wd_script <- "C:/Users/frederic.bray/Nextcloud/Stage bois bûche Lucas/Projet Bois-buche/scripts/R/"
# wd_data <- "C:/Users/frederic.bray/Nextcloud/Stage bois bûche Lucas/Projet Bois-buche/data/1_Source/"
wd_script <- "C:/Users/gmace/PAB/Projet Bois-buche/scripts/R"
wd_data <- "../../data/1_Source/"
# Load custom scripts to connect the database
setwd(wd_script)
con_encoding <- "UTF-8"
source("R_connect_siddt.R")
source("R_functions.R")
setwd("C:/Users/gmace/PAB/Projet Bois-buche/script R Gabriel")
data <- read_excel("../data/3_Resultat/data_questionnaire_complet.xlsx")[-1]
data <- read_excel("../data/3_Resultat/data_questionnaire_complet.xlsx")[-1]
comm <- read.csv("../data/siddt.csv", sep = ";", skip = 2)[-c(127:130)]
comm2 <- read.csv("../data/siddt2.csv", sep = ";", skip = 2)[-c(84,85,86, 87)]
View(comm)
summary(is.na(comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....))
summary(is.na(comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....))
comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....)
comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....
summary(comm$Moyenne.du.salaire.net.horaire.moyen.en.2015.... == "")
