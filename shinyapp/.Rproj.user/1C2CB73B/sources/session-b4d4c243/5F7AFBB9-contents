---
title: "Variables communales"
author: "Gabriel Macé"
date: "2024-05-28"
output: html_document
---

```{r setup, include=FALSE}
library(readxl)
library(writexl)
library(stringr)
library(tidyr)
library(sf)
library(dplyr)
library(stats)
library(ggplot2)
library(ggspatial)
library(plotly)
wd_script <- "C:/Users/gmace/PAB/Projet Bois-buche/scripts/R"
setwd(wd_script)
con_encoding <- "UTF-8"
source("R_connect_siddt.R")
source("R_functions.R")
setwd("C:/Users/gmace/PAB/Projet Bois-buche/script R Gabriel")
data <- read_excel("../data/3_Resultat/data_questionnaire_complet.xlsx")[-1]
data <- data[!data$insee_com %in% c("38453","38278", "38526", "38194", "38118", "38013", "38248", "38450", "38236", "38412", "38405", "38442", "38446", "38378"),]
comm <- read.csv("../data/siddt.csv", sep = ";", skip = 2)[-c(124:130),]
comm2 <- read.csv("../data/siddt2.csv", sep = ";", skip = 2)[-c(124:130),]
appareils <- read_excel("../data/appareils_communes.xlsx")
objectifs_communes <- read_excel("../data/objectifs_communes_2022_2023.xlsx")[1:123,1:4]
oc <- read_excel("../data/objectifs_communes_2022_2023.xlsx")[124:239,c(2,4)]
objectifs_communes <- left_join(objectifs_communes, oc, by = "id_comm")
objectifs_communes$id_comm = as.character(objectifs_communes$id_comm)
shp <- st_read(dsn = "../data/EPCI 2024_region.shp")
shp = shp[c(27, 175, 929),]
shp$ sociale <- c("CCLG", "GAM", "CAPV")
pop <- read.csv("../data/population.csv", sep = ";", skip = 2)[1:123, c(1,3)]
revenus_communes <- read_xlsx("../data/revenu_communes_insee.xlsx", skip = 5, col_names = TRUE)
revenus_communes <- revenus_communes[revenus_communes$CODGEO %in% data$insee_com,]
```

```{r}
length(na.omit(as.numeric(comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....)))
```

```{r}
data_comm <- left_join(data, comm, by= c("insee_com" = "communes.depcom"))
data_comm2 <- left_join(data, comm2, by= c("insee_com" = "communes.depcom"))
```

```{r}
length(na.omit(as.numeric(data_comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....)))
```

```{r}
table(data_comm$Moyenne.du.salaire.net.horaire.moyen.en.2015....)
```

```{r}
rf <- read.csv("../data/revenu_fiscaux_2011.csv", sep = ",")# que 20 communes
```



```{r}
length(sort(comm[comm$communes.depcom %in% unique(data$insee_com),"communes.depcom"]))
length(table(data_comm[data_comm$insee_com %in% unique(comm$communes.depcom),]$insee_com))
```

```{r}
forets = comm[comm$communes.depcom %in% unique(data$insee_com),]
forets = forets[order(forets$communes.depcom ),]
siddt2 = comm2[comm2$communes.depcom %in% unique(data$insee_com),]
siddt2 = siddt2[order(siddt2$communes.depcom ),]
nb_doss_ville = table(data_comm[data_comm$insee_com %in% unique(comm$communes.depcom),]$insee_com)
nb_doss_ville2 = table(data_comm2[data_comm2$insee_com %in% unique(comm2$communes.depcom),]$insee_com)

```

```{r}
for(n in names(forets)[-c(1,2)]){
    print(n)
    print(cor(as.numeric(forets[,n]), nb_doss_ville))
}
```

```{r}
for(n in names(siddt2)[-c(1,2)]){
    print(n)
    print(cor(as.numeric(siddt2[,n]), nb_doss_ville2))
}
```


```{r}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
```

```{r}
count <- data %>%
  group_by(insee_com) %>%
  count()
forets = forets[,c(1,3, 4, 7)]
names(forets) <- c("insee_com", "superficie_forets", "part_forets", "part_maisons_2020")
forets[,2] <-as.numeric(forets[,2])
forets[,3] <-as.numeric(forets[,3])
forets[,4] <-as.numeric(forets[,4])
layer_communes <- layer_communes %>% left_join(count) 
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
```

```{r}
library(plotly)
to_plot <- left_join(layer_communes, forets, by = "insee_com")
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = part_forets)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = superficie_forets, label3 = part_forets, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
  theme_void()
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1.2, fill = NA)
plot
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot
ggsave("../carto/carte_part_forets.png", width = 20, height = 20, units = "cm")
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_part_forets_interactive.html")
```


```{r}
library(plotly)
to_plot <- left_join(layer_communes, forets, by = "insee_com")
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = part_maisons_2020)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = part_maisons_2020, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
  theme_void()
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1.2, fill = NA)
plot
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2",  "label4"))

# Afficher la carte interactive
plotly_plot

ggsave("../carto/carte_part_maisons.png", width = 20, height = 20, units = "cm")
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_part_maisons_interactive.html")
```

```{r}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
```

```{r}
count <- data %>%
  group_by(insee_com) %>%
  count()
names(siddt2)[1:3] = c("insee_com", "communes", "densité_poplation_km2_2020")
siddt2[,3] <-as.numeric(siddt2[,3])
layer_communes <- layer_communes %>% left_join(count) 
```

```{r}
library(plotly)
to_plot <- left_join(layer_communes, siddt2[,c(1:3)], by = "insee_com")
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = densité_poplation_km2_2020)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = densité_poplation_km2_2020, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
  theme_void()
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1.2, fill = NA)
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label4"))

# Afficher la carte interactive
plotly_plot

ggsave("../carto/carte_densité_pop.png", width = 20, height = 20, units = "cm")
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_densité_pop_interactive.html")
```


```{r}
#### Interface shiny :

library(shiny)

# Créer l'interface utilisateur Shiny
ui <- fluidPage(
  titlePanel("Carte interactive"),
  selectInput("info", "Choisir l'information à afficher au survol:",
              choices = c("Nom de la commune" = "label",
                          "Code INSEE" = "label1",
                          "Nombre d'éléments" = "label4",
                          "superficie de forêts" = "label2",
                          "part de forêts" = "label3"
                          )),
  plotlyOutput("plot")
)

# Créer le serveur Shiny
server <- function(input, output) {
library(plotly)
to_plot <- left_join(layer_communes, forets, by = "insee_com")
# Créer un objet ggplot
output$plot <- renderPlotly({
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = part_forets)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = superficie_forets, label3 = part_forets, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
  theme_void()

# Convertir l'objet ggplot en plotly
ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
})
}

# Lancer l'application Shiny
carte_interactive <- shinyApp(ui = ui, server = server)
carte_interactive
#saveRDS(carte_interactive, "../../carto/app.R")
```

# nb dossier / pop

```{r}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
count <- data %>%
  group_by(insee_com) %>%
  count()
layer_communes = layer_communes %>% left_join(count)
layer_communes = layer_communes %>% left_join(pop, by = join_by("insee_com" == "communes.depcom"))
```
```{r}
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>%
  mutate(dossier_par_habitant = n/Population.en.2020)
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill = dossier_par_habitant)) +
  scale_fill_gradient(low = "white",
                      high = "blue", 
                      na.value = "grey80")+
  #scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = dossier_par_habitant, label3 = n, label4 = Population.en.2020), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = "Taux de dossiers par habitants") +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_taux_dossiers_habitants.png", width = 20, height = 20, units = "cm")
```

```{r}
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_dossiers_habitants_interactive.html")
```

# Revenus par communes
```{r}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
count <- data %>%
  group_by(insee_com) %>%
  count()
layer_communes = layer_communes %>% left_join(count)
revenus_communes = revenus_communes[, c(1, 3:5)]
names(revenus_communes) = c("insee_com", "nb_ménages_fiscaux", "nb_personnes_menages_fiscaux", "mediane_niveau_vie")
layer_communes = layer_communes %>% left_join(revenus_communes, by = "insee_com")
```

```{r}
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>% mutate(taux_dossier_par_ménages = as.numeric(nb_ménages_fiscaux) / n)
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill = as.numeric(mediane_niveau_vie))) +
  scale_fill_gradient(low = "white",
                      high = "blue", 
                      na.value = "grey80")+
  #scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = mediane_niveau_vie, label3 = n, label4 = nb_ménages_fiscaux, label5 = taux_dossier_par_ménages), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = "Médiane de niveau de vie en 2021") +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_revenus_moyens.png", width = 20, height = 20, units = "cm")
```
```{r}
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4", "label5"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_revenus_moyens_interactive.html")
```

```{r}
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>% mutate(taux_dossier_par_ménages = n / as.numeric(nb_ménages_fiscaux))
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill = as.numeric(taux_dossier_par_ménages))) +
  scale_fill_gradient(low = "white",
                      high = "blue", 
                      na.value = "grey80")+
  #scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = mediane_niveau_vie, label3 = n, label4 = nb_ménages_fiscaux, label5 = taux_dossier_par_ménages), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = "Taux de dossier par ménages en 2021") +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_taux_dossier_par_ménages.png", width = 20, height = 20, units = "cm")
```
```{r}
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4", "label5"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_dossier_par_ménages_interactive.html")
```


```{r}
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill =  part_foyers_imposables_2011)) +
  scale_fill_gradient(low = "white",
                      high = "blue", 
                      na.value = "grey80")+
  #scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = revenu_moyen_2011, label3 = n, label4 = part_foyers_imposables_2011), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = " Part des foyers fiscaux imposables en 2011") +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_part_foyers_imposables.png", width = 20, height = 20, units = "cm")
```
```{r}
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))
# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_part_foyers_imposables_interactive.html")
```


```{r}
for(n in names(siddt2)[-c(1,2)]){
    print(n)
    print(cor(as.numeric(siddt2[,n]), nb_doss_ville2))
}
```

```{r}
count <- data %>%
  group_by(insee_com) %>%
  count()
siddt2 = siddt2[,c(1,3, 4)]
names(siddt2) <- c("insee_com", "densité_pop", "part_maisons")
siddt2[,2] <-as.numeric(siddt2[,2])
siddt2[,3] <-as.numeric(siddt2[,3])
layer_communes <- layer_communes %>% left_join(count)
```

```{r}
library(plotly)
to_plot <- left_join(layer_communes, siddt2, by = "insee_com")
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = part_maisons)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = densité_pop, label3 = part_maisons, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
  theme_void()
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1.2, fill = NA)
plot
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot

ggsave("../carto/carte_part_maisons.png", width = 20, height = 20, units = "cm")
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_part_maisons_interactive.html")
```








```{r}
impots <- read_excel("../data/revenus_communes.xlsx", skip = 6, col_names = TRUE)[-1,]
impots <- impots[impots["Revenu fiscal de référence par tranche (en euros)"] == "Total" & impots["Dép."] == "380",c("Libellé de la commune", "Nombre de foyers fiscaux", "Revenu fiscal de référence des foyers fiscaux", "Nombre de foyers fiscaux imposés")]
names(impots) <- c("adresse_ville", "Nombre_foyers_fiscaux", "Revenu_fiscal_référence", "Nombre_foyers_fiscaux_imposés")
impots = na.omit(impots)
```

```{r}
impots$adresse_ville =  str_to_upper(impots$adresse_ville)
```

```{r}
impots <- impots %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "_", "-")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, " ", "-")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "’", "'")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "É", "E")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "È", "E")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "Ê", "E")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "Ô", "O")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "Â", "A")) %>%
  mutate(adresse_ville = toupper(adresse_ville)) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "SAINT", "ST")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "ALLEVARD-LES-BAINS", "CRETS-EN-BELLEDONNE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-PLATEAU-DES-PETITES-ROCHES", "PLATEAU-DES-PETITES-ROCHES")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD", "VILLARD-BONNOT")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-FONTANIL-CORNILLON", "FONTANIL-CORNILLON")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-GA", "LE-GUA")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VF", "VIF")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "MURAINETTE", "MURIANETTE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SAPPEY-EN-CHARTREUSE", "LE-SAPPEY-EN-CHARTREUSE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOIROIZE", "VEUREY-VOROIZE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOROISE", "VEUREY-VOROIZE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SEYSINNET-PARISET", "SEYSSINET-PARISET")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LANCEY", "LA-COMBE-DE-LANCEY"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "STE-AGNÈS", "STE-AGNES"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-BUISSIÈRE", "LA-BUISSIERE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FLACHÈRE", "LA-FLACHERE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "HURTIÈRES", "HURTIERES"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "CRÊTS-EN-BELLEDONNE", "CRETS-EN-BELLEDONNE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-CHAMP-PRÈS-FROGES", "LE-CHAMP-PRES-FROGES"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "DOMÈNE", "DOMENE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FERRIÈRE", "LA-FERRIERE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD-->VILLARD-BONNOT", "VILLARD-BONNOT"))
```

```{r}
nb_doss_ville = table(data[data$adresse_ville %in% unique(impots$adresse_ville),]$adresse_ville)
```

```{r}
impots = impots[impots$adresse_ville %in% unique(data$adresse_ville),]
impots = impots[order(impots$adresse_ville ),]
```

```{r}
impots$Nombre_foyers_fiscaux = as.numeric(impots$Nombre_foyers_fiscaux)
impots$Revenu_fiscal_référence = as.numeric(impots$Revenu_fiscal_référence)
impots$Nombre_foyers_fiscaux_imposés = as.numeric(impots$Nombre_foyers_fiscaux_imposés)
cor(nb_doss_ville, impots$Nombre_foyers_fiscaux)
cor(nb_doss_ville, impots$Revenu_fiscal_référence)
cor(nb_doss_ville, (impots$Revenu_fiscal_référence / impots$Nombre_foyers_fiscaux))
cor(nb_doss_ville, (impots$Nombre_foyers_fiscaux_imposés / impots$Nombre_foyers_fiscaux))
```

```{r}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
dim(layer_communes)
count <- data %>%
  group_by(adresse_ville) %>%
  count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("nom_commune" == "adresse_ville") )
```

```{r}
library(plotly)
to_plot <- left_join(layer_communes, impots, by = join_by("nom_commune" == "adresse_ville") )
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = Revenu_fiscal_référence)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = Revenu_fiscal_référence, label3 = Nombre_foyers_fiscaux, label4 = n), size = 1, color = "transparent", na.rm = FALSE) +
  theme_void()
plot
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot

# ggsave("../carto/carte_revenus.png", width = 20, height = 20, units = "cm")
# htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_revenus_interactive.html")
```


# Appreils à changer par communes GAM 2021 :


```{r}
names(appareils)[2] <- c("adresse_ville")
```



```{r}
appareils <- appareils %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "_", "-")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, " ", "-")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "’", "'")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "É", "E")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "È", "E")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "Ê", "E")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "Ô", "O")) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "Â", "A")) %>%
  mutate(adresse_ville = toupper(adresse_ville)) %>%
  mutate(adresse_ville = str_replace_all(adresse_ville, "SAINT", "ST")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "ALLEVARD-LES-BAINS", "CRETS-EN-BELLEDONNE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-PLATEAU-DES-PETITES-ROCHES", "PLATEAU-DES-PETITES-ROCHES")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD", "VILLARD-BONNOT")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-FONTANIL-CORNILLON", "FONTANIL-CORNILLON")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-GA", "LE-GUA")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VF", "VIF")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "MURAINETTE", "MURIANETTE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SAPPEY-EN-CHARTREUSE", "LE-SAPPEY-EN-CHARTREUSE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOIROIZE", "VEUREY-VOROIZE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "VEUREY-VOROISE", "VEUREY-VOROIZE")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "SEYSINNET-PARISET", "SEYSSINET-PARISET")) %>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LANCEY", "LA-COMBE-DE-LANCEY"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "STE-AGNÈS", "STE-AGNES"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-BUISSIÈRE", "LA-BUISSIERE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FLACHÈRE", "LA-FLACHERE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "HURTIÈRES", "HURTIERES"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "CRÊTS-EN-BELLEDONNE", "CRETS-EN-BELLEDONNE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LE-CHAMP-PRÈS-FROGES", "LE-CHAMP-PRES-FROGES"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "DOMÈNE", "DOMENE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "LA-FERRIÈRE", "LA-FERRIERE"))%>%
  mutate(adresse_ville = replace(adresse_ville, adresse_ville == "BRIGNOUD-->VILLARD-BONNOT", "VILLARD-BONNOT"))
```

```{r}
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
dim(layer_communes)
data$dossier_reçu <- as.Date(data$dossier_reçu)
count_2021 <- data[data$dossier_reçu >= "2021-01-01" & data$Période.de.construction != "après 2005",] %>%
  group_by(adresse_ville) %>%
  count()
count_av_2021 <- data[data$dossier_reçu < "2021-01-01" & data$Période.de.construction != "après 2005",] %>%
  group_by(adresse_ville) %>%
  count()

count <- data[data$Période.de.construction != "après 2005",] %>% 
  group_by(adresse_ville) %>%
  count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("nom_commune" == "adresse_ville") ) # n.x
layer_communes <- layer_communes %>% left_join(count_2021, by = join_by("nom_commune" == "adresse_ville") ) # n.y
layer_communes <- layer_communes %>% left_join(count_av_2021, by = join_by("nom_commune" == "adresse_ville") ) # n
############################################################################


#NE PRENDRE QUE APRès 2021

##########################################
```

```{r}
appareils_2005 = appareils[appareils$anciennete == "Antérieur à 2005" & appareils$nb_appareil >=0,]
appareils_2005$nb_appareil = round(appareils_2005$nb_appareil)
ville = unique(data[data$adresse_ville %in% unique(appareils_2005$adresse_ville),]$adresse_ville)
appareils_2005 <- appareils_2005 %>% group_by(adresse_ville)
appareils_2005 <- appareils_2005 %>% summarise(nb_appareil = sum(nb_appareil))
```

```{r}
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
  mutate(appareils_anterieurs_2005 = nb_appareil,
         taux_appareils_cibles_changes = n.x / (nb_appareil + n),
         appareils_cibles_changes = n.x)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = taux_appareils_cibles_changes)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80", limits = c(0, 1)) +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_cibles_changes, label4 = appareils_cibles_changes), size = 1, color = "transparent", na.rm = FALSE) +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  labs(fill = "Taux d'appareils cibles changés") +
  theme_void()
plot
ggsave("../carto/carte_objectifs.png", width = 20, height = 20, units = "cm")
```

```{r}
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label3", "label4"))

# Afficher la carte interactive
plotly_plot

htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_interactive.html")
```

```{r}
# depuis 2021 : 
library(plotly)
to_plot <- left_join(layer_communes, appareils_2005, by = join_by("nom_commune" == "adresse_ville") )
to_plot <- to_plot %>%
  mutate(appareils_anterieurs_2005 = nb_appareil,
         taux_appareils_changes_depuis_2021 = n.y / (nb_appareil),
         appareils_changes_depuis_2021 = n.y)
# Créer un objet ggplot
plot <- ggplot(to_plot) +
  geom_sf(aes(fill = taux_appareils_changes_depuis_2021)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80", limits = c(0, 1)) +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005, label3 = taux_appareils_changes_depuis_2021, label4 = appareils_changes_depuis_2021), size = 1, color = "transparent", na.rm = FALSE) +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  labs(fill = "Taux d'appareils cibles changés depuis 2021") +
  theme_void()
plot
ggsave("../carto/carte_objectifs_2021.png", width = 20, height = 20, units = "cm")
```

```{r}
# Convertir l'objet ggplot en plotly
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1", "label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot

htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_objectifs_2021_interactive.html")
```



# changement / appareil cibles 2022-2023

```{r}
# Get polygons communes data
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(objectifs_communes$id_comm),]
to_plot <- left_join(layer_communes, objectifs_communes[,c(2,4,5)], by = join_by("insee_com" == "id_comm") )
to_plot <- to_plot %>%
  mutate(appareils_anterieurs_2005_en_2022 = nb_app_anciens.x,
         appareils_changés_en_2023 = abs(nb_app_anciens.y),
         taux_appreils_changés_2023 = abs(nb_app_anciens.y) / nb_app_anciens.x)
```


```{r}
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill = taux_appreils_changés_2023)) +
  scale_fill_gradient(low = "white", high = "blue", na.value = "grey80", limits = c(0, 1))+
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = appareils_anterieurs_2005_en_2022, label3 = appareils_changés_en_2023, label4 = taux_appreils_changés_2023), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = "Taux d'appareils changés en 2023") +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_taux_changement_2022_2023.png", width = 20, height = 20, units = "cm")

```

```{r}
# Convertir l'objet ggplot en plotly
library(plotly)
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot
htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_changement_2022_2023_interactive.html")
```



# Carte taux majoration

```{r}
# Prepare Map with new inseecom
count <- data %>%
  group_by(insee_com) %>%
  count()

# Get polygons communes data
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
```

```{r}
data_maj <- data[data$majoration == "M" & !(is.na(data$majoration)),] %>% group_by(insee_com) %>% count()
data_n_maj <- data[data$majoration == "NM" & !(is.na(data$majoration)),] %>% group_by(insee_com) %>% count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("insee_com" == "insee_com") ) # n.x
layer_communes <- layer_communes %>% left_join(data_maj, by = join_by("insee_com" == "insee_com") ) # n.y
layer_communes <- layer_communes %>% left_join(data_n_maj, by = join_by("insee_com" == "insee_com") ) # n
```

```{r}
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>%
  mutate(taux_majorées = (n.y/(n.y+n)),
         majorées = n.y,
         non_majorées = n,
         nombre_prime = n.x)
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill = taux_majorées)) +
  scale_fill_gradient(low = "white",
                      high = "blue", 
                      na.value = "grey80")+
  #scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = taux_majorées, label3 = majorées, label4 = non_majorées), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = "Taux de primes majorées") +
  annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_taux_majorées.png", width = 20, height = 20, units = "cm")
```

```{r}
# Convertir l'objet ggplot en plotly
library(plotly)
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot

htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_majorées_interactive.html")
```

# Carte taux foyers ouverts

```{r}
# Prepare Map with new inseecom
count <- data %>%
  group_by(insee_com) %>%
  count()

# Get polygons communes data
sql <- "SELECT insee_com, nom_m AS nom_commune, the_geom 
        FROM bd_admin_express.geo_commune_2022
        WHERE insee_dep = '38'
		    ORDER BY 1"
layer_communes <- st_read(con, query = sql)
layer_communes <- layer_communes[layer_communes$insee_com %in% unique(data$insee_com),]
```

```{r}
data_fo <- data[data$Type.Ancien.appareil == "Foyer ouvert" & !(is.na(data$Type.Ancien.appareil)),] %>% group_by(insee_com) %>% count()
data_nfo <- data[data$Type.Ancien.appareil != "Foyer ouvert" & !(is.na(data$Type.Ancien.appareil)),] %>% group_by(insee_com) %>% count()
layer_communes <- layer_communes %>% left_join(count, by = join_by("insee_com" == "insee_com") ) # n.x
layer_communes <- layer_communes %>% left_join(data_fo, by = join_by("insee_com" == "insee_com") ) # n.y
layer_communes[is.na(layer_communes$n.y),"n.y"] <- 0
layer_communes <- layer_communes %>% left_join(data_nfo, by = join_by("insee_com" == "insee_com") ) # n
layer_communes[is.na(layer_communes$n),"n"] <- 0
```

```{r}
# Join feature and counted data
to_plot <- layer_communes
to_plot <- to_plot %>%
  mutate(taux_foyers_ouverts = (n.y/(n.x)),
         foyers_ouverts = n.y,
         autres_foyers = n,
         nombre_prime = n.x)
plot <-to_plot %>%
  ggplot() +
  geom_sf(aes(fill = taux_foyers_ouverts)) +
  scale_fill_gradient(low = "white",
                      high = "blue", 
                      na.value = "grey80")+
  #scale_fill_brewer(palette = "OrRd", na.value = "grey90") +
  geom_sf_text(aes(label = nom_commune, label1 = insee_com, label2 = taux_foyers_ouverts, label3 = foyers_ouverts, label4 = autres_foyers), size = 1, color = "transparent", na.rm = FALSE) +
  labs(fill = "Taux de foyers ouverts") +
    annotation_scale(location = "br", bar_cols = "black", width_hint = 0.5/3) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm")) +
  theme_void() 
plot <- plot + 
  geom_sf(data = shp, aes(fill = Z_MOYEN), color = c("red", "blue", "green"), lwd = 1.2, fill = NA)
# Save map to png
plot
ggsave("../carto/carte_taux_foyers_ouverts.png", width = 20, height = 20, units = "cm")
```

```{r}
# Convertir l'objet ggplot en plotly
library(plotly)
plotly_plot <- ggplotly(plot, tooltip = c("label", "label1","label2", "label3", "label4"))

# Afficher la carte interactive
plotly_plot

htmlwidgets::saveWidget( widget = plotly_plot, file =  "../carto/carte_taux_foyers_ouverts_interactive.html")
```



```{r}
ggplot(shp) + geom_sf(aes(fill = Z_MOYEN))
```
